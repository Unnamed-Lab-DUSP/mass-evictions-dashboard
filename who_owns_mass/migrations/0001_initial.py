# Generated by Django 4.1.5 on 2024-10-31 17:20

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.IntegerField(db_index=True, primary_key=True, serialize=False)),
                ('addr', models.CharField(blank=True, help_text='Complete number, street name, type string, often reconstructed from address ranges, PO Boxes, etc.', max_length=500, null=True)),
                ('start', models.DecimalField(blank=True, decimal_places=1, help_text='For ranges, start of address range. For single-number addresses, that single number.', max_digits=100, null=True)),
                ('end', models.DecimalField(blank=True, decimal_places=1, help_text='For ranges, end of address range. For single-number addresses, that single number.', max_digits=100, null=True)),
                ('body', models.CharField(blank=True, help_text='Street name and address type.', max_length=500, null=True)),
                ('even', models.BooleanField(default=False, help_text='Whether an address is even or odd.')),
                ('postal', models.CharField(blank=True, help_text='Postal code. For US addresses, a ZIP code.', max_length=50, null=True)),
                ('state', models.CharField(blank=True, help_text='State (or, for international addresses, a region).', max_length=100, null=True)),
            ],
            options={
                'db_table': 'address',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BlockGroup',
            fields=[
                ('id', models.CharField(help_text='Unique identifier (i.e., the 12-digit GEOID).', max_length=12, primary_key=True, serialize=False)),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'db_table': 'block_group',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=500, null=True)),
                ('company_type', models.CharField(blank=True, max_length=500, null=True)),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.address')),
            ],
            options={
                'db_table': 'company',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MetaCorp',
            fields=[
                ('id', models.CharField(db_index=True, max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, help_text='Most common company name within metacorp.', max_length=500, null=True)),
                ('val', models.IntegerField(blank=True, help_text='Summed building and residential value held by a particular metacorp.', null=True)),
                ('prop_count', models.IntegerField(blank=True, help_text='Number of properties (i.e., sites rows) linked to a given metacorp.', null=True)),
                ('unit_count', models.FloatField(blank=True, help_text='Estimated number of units linked to a given metacorp.', null=True)),
                ('area', models.IntegerField(blank=True, help_text="Summed building area held by a particular metacorp (where 'building area' means the larger of res_area and bld_area).", null=True)),
                ('units_per_prop', models.FloatField(blank=True, help_text='Total estimated units divided by the property count. This is a measure of what scale of property a given owner invests in.', null=True)),
                ('val_per_prop', models.FloatField(blank=True, help_text='Total value divided by property count. A measure of how valuable a given metacorps properties are.', null=True)),
                ('val_per_area', models.FloatField(blank=True, help_text='Value per square foot. Another measure of how valuable a metacorps properties are.', null=True)),
                ('company_count', models.IntegerField(blank=True, help_text='How many unique companies appear within a given metacorp.', null=True)),
            ],
            options={
                'db_table': 'metacorps_network',
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.CharField(max_length=250, primary_key=True, serialize=False)),
                ('muni', models.CharField(help_text='Name of municipality.', max_length=250)),
                ('state', models.CharField(help_text='Name of municipality.', max_length=25, null=True)),
                ('hns', models.BooleanField(default=False, help_text='If TRUE, municipality is one of the Healthy Neighborhoods Study areas.')),
                ('mapc', models.BooleanField(default=False, help_text='If TRUE, municipality is part of the MAPC region.')),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'db_table': 'muni',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Officer',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of officer.', max_length=500, null=True)),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.address')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.company')),
                ('metacorp', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.metacorp')),
            ],
            options={
                'db_table': 'officer',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, help_text='Deduplicated owner name.', max_length=500, null=True)),
                ('inst', models.BooleanField(help_text='Institutional owner. If TRUE, we flagged the owner as institutional using keywords unlikely to be identified with individuals.', null=True)),
                ('trust', models.BooleanField(help_text='Trust. If TRUE, we flagged the owner as a trust using keywords.', null=True)),
                ('trustees', models.BooleanField(help_text='Trustees. If TRUE, we flagged the owner as trustees of a trust using keywords.', null=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.address')),
                ('metacorp', models.ForeignKey(blank=True, help_text='network_group in original data', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.metacorp')),
            ],
            options={
                'db_table': 'owner',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('name', models.CharField(max_length=500, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'role',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('fy', models.IntegerField(help_text="Fiscal year of assessor's database.")),
                ('ls_date', models.DateField(help_text='Last sale date. Unmodified from MassGIS, see their documentation.', null=True)),
                ('ls_price', models.IntegerField(help_text='Last sale price. Unmodified from MassGIS, see their documentation.', null=True)),
                ('bld_area', models.IntegerField(help_text='Building area. Unmodified from MassGIS, see their documentation.', null=True)),
                ('res_area', models.IntegerField(help_text='Residential area. Unmodified from MassGIS, see their documentation.', null=True)),
                ('units', models.IntegerField(help_text='Estimated unit count.')),
                ('bld_val', models.IntegerField(help_text='Building value. Unmodified from MassGIS, see their documentation.')),
                ('lnd_val', models.IntegerField(help_text='Land value. Unmodified from MassGIS, see their documentation.')),
                ('use_code', models.CharField(help_text='Use code. Unmodified from MassGIS, see their documentation.', max_length=20)),
                ('luc', models.CharField(help_text='Land use code. Assigned based on our modified version of a crosswalk supplied by MAPC.', max_length=10)),
                ('ooc', models.BooleanField(help_text='Owner occupied. If TRUE, listed owner address matches listed property address.')),
                ('condo', models.BooleanField(help_text="Condo. If TRUE, there are properties with a condo land use code on the parcel (which leads us to treat the whole thing as a 'condo', i.e., a parcel with multiple associated properties).")),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.address')),
                ('muni_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.municipality')),
            ],
            options={
                'db_table': 'site',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tract',
            fields=[
                ('id', models.CharField(help_text='Unique identifier (i.e., the 11-digit GEOID).', max_length=11, primary_key=True, serialize=False)),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'db_table': 'tract',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ZipCode',
            fields=[
                ('zip', models.CharField(help_text='Unique identifier (i.e., the 11-digit GEOID).', max_length=50, primary_key=True, serialize=False)),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'db_table': 'zip',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SiteToOwner',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('owner', models.ForeignKey(help_text='Identifier of owner.', on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.owner')),
                ('site', models.ForeignKey(help_text='Identifier of property.', on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.site')),
            ],
            options={
                'db_table': 'site_to_owner',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ParcelPoint',
            fields=[
                ('id', models.CharField(db_index=True, max_length=100, primary_key=True, serialize=False)),
                ('lat', models.FloatField(null=True)),
                ('lng', models.FloatField(null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('block_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.blockgroup')),
                ('muni_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.municipality')),
                ('tract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.tract')),
            ],
            options={
                'db_table': 'parcels_point',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='owner',
            name='site',
            field=models.ManyToManyField(blank=True, through='who_owns_mass.SiteToOwner', to='who_owns_mass.site'),
        ),
        migrations.CreateModel(
            name='OfficerRoles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('officer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='who_owns_mass.officer')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='who_owns_mass.role')),
            ],
            options={
                'db_table': 'officer_to_role',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='officer',
            name='roles',
            field=models.ManyToManyField(through='who_owns_mass.OfficerRoles', to='who_owns_mass.role'),
        ),
        migrations.AddField(
            model_name='company',
            name='metacorp',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.metacorp'),
        ),
        migrations.AddField(
            model_name='address',
            name='muni_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.municipality'),
        ),
        migrations.AddField(
            model_name='address',
            name='parcel',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='who_owns_mass.parcelpoint'),
        ),
    ]
